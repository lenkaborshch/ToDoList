{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","state/todolistsReducer.ts","state/tasksReducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","onAddTaskClick","useCallback","trim","addItem","onChangeHandler","e","currentTarget","value","onKeyPressHandler","key","TextField","variant","onChange","onKeyPress","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","deActivatedEditMode","changeValue","onBlur","autoFocus","onDoubleClick","Task","removeTask","task","id","todolistId","changeTaskStatus","checked","changeTaskTitle","className","isDone","Checkbox","Delete","TodoList","tasksTodoLists","useSelector","state","tasks","filter","map","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","addTask","removeTodoList","changeTodoListTitle","Button","initialState","v1","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","AppWithRedux","classes","todoLists","todolists","dispatch","useDispatch","todoListId","type","addTaskAC","taskId","removeTaskAC","changeTaskStatusAC","changeTaskTitleAC","filterValue","changeFilterTodolistAC","removeTodolistAC","addTodoList","action","addTodolistAC","changeTitleTodoList","changeTitleTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","tl","item","Paper","rootReducer","combineReducers","copyState","newTask","todolistsTasks","stateCopy","todoList","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f893959d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets  see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState<string>('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onAddTaskClick = useCallback (() => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n    }, [props.addItem, title])\r\n\r\n    const onChangeHandler = useCallback ((e: ChangeEvent<HTMLInputElement>) => {\r\n        if(error) {\r\n            setError(null)\r\n        }\r\n        setTitle(e.currentTarget.value)\r\n    }, [error])\r\n\r\n    const onKeyPressHandler = useCallback( (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onAddTaskClick()\r\n        }\r\n    }, [title])\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant='standard'\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label='Write...'\r\n                       helperText={error}/>\r\n            <IconButton color='primary' onClick={onAddTaskClick}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useState, ChangeEvent} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    changeValue: (value: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeValue(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField variant='standard'\r\n                         value={title}\r\n                         onBlur={deActivatedEditMode}\r\n                         onKeyPress={e => e.key === 'Enter' ? deActivatedEditMode() : null}\r\n                         autoFocus={true}\r\n                         onChange={onChangeHandler}\r\n            />\r\n            : <span onDoubleClick={activatedEditMode}>{props.value}</span>\r\n    )\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskType} from './App'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const removeTask = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.todolistId, props.removeTask])\r\n\r\n    const changeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked, props.todolistId)\r\n    }, [props.todolistId, props.changeTaskStatus])\r\n\r\n    const changeTaskTitle = useCallback((value: string) => {\r\n        props.changeTaskTitle(props.task.id, value, props.todolistId)\r\n    }, [props.todolistId, props.changeTaskTitle])\r\n\r\n    return (\r\n        <div className={props.task.isDone ? 'is-done' : ''}>\r\n            <Checkbox color='primary' checked={props.task.isDone} onChange={changeTaskStatus}/>\r\n            <EditableSpan value={props.task.title} changeValue={changeTaskTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>)\r\n})","import React, {useCallback} from 'react'\r\nimport {FilterValuesType, TaskType} from './App'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {AppRootStoreType} from './state/store'\r\nimport {useSelector} from 'react-redux'\r\nimport {Task} from './Task'\r\n\r\nexport type TodoListPropsType = {\r\n    todolistId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo(function (props: TodoListPropsType) {\r\n\r\n    let tasksTodoLists = useSelector<AppRootStoreType, Array<TaskType>>(state => state.tasks[props.todolistId])\r\n\r\n    if (props.filter === 'active') {\r\n        tasksTodoLists = tasksTodoLists.filter(task => !task.isDone)\r\n    }\r\n\r\n    if (props.filter === 'completed') {\r\n        tasksTodoLists = tasksTodoLists.filter(task => task.isDone)\r\n    }\r\n\r\n    const tasks = tasksTodoLists.map(task => {\r\n        return <Task key={task.id} task={task} changeTaskStatus={props.changeTaskStatus}\r\n                     changeTaskTitle={props.changeTaskTitle}\r\n                     removeTask={props.removeTask} todolistId={props.todolistId}/>\r\n    })\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolistId), [props.todolistId, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolistId), [props.todolistId, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolistId), [props.todolistId, props.changeFilter])\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.todolistId), [props.addTask, props.todolistId])\r\n    const removeTodoList = useCallback(() => props.removeTodoList(props.todolistId), [props.todolistId, props.removeTodoList])\r\n    const changeTodoListTitle = useCallback((title: string) => props.changeTodoListTitle(title, props.todolistId), [props.todolistId, props.changeTodoListTitle])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={props.title} changeValue={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n\r\n            <div>\r\n                <Button onClick={onAllClickHandler}\r\n                        variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        color={props.filter === 'all' ? 'secondary' : 'default'}>All</Button>\r\n                <Button onClick={onActiveClickHandler}\r\n                        variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        color={props.filter === 'active' ? 'secondary' : 'default'}>Active</Button>\r\n                <Button onClick={onCompletedClickHandler}\r\n                        variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        color={props.filter === 'completed' ? 'secondary' : 'default'}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {FilterValuesType, TodoListType} from \"../App\"\r\nimport {v1} from \"uuid\"\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE_TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD_TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeFilterTodolistActionType = {\r\n    type: 'CHANGE_TODOLIST_FILTER'\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\n\r\ntype ChangeTitleTodolistActionType = {\r\n    type: 'CHANGE_TODOLIST_TITLE'\r\n    title: string\r\n    id: string\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType |\r\n    ChangeFilterTodolistActionType | ChangeTitleTodolistActionType\r\n\r\nexport const removeTodolistAC = (todoListId: string): RemoveTodolistActionType => ({\r\n    type: 'REMOVE_TODOLIST',\r\n    id: todoListId\r\n})\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => ({\r\n    type: 'ADD_TODOLIST',\r\n    title: title,\r\n    todolistId: v1()\r\n})\r\nexport const changeFilterTodolistAC = (filter: FilterValuesType, todoListId: string): ChangeFilterTodolistActionType => ({\r\n    type: 'CHANGE_TODOLIST_FILTER',\r\n    id: todoListId,\r\n    filter: filter\r\n})\r\n\r\nexport const changeTitleTodolistAC = (title: string, todoListId: string): ChangeTitleTodolistActionType => ({\r\n    type: 'CHANGE_TODOLIST_TITLE',\r\n    id: todoListId,\r\n    title: title\r\n})\r\n\r\nconst initialState: Array<TodoListType> = [\r\n    {id: 'todoListId1', title: 'What to learn', filter: 'all'},\r\n    {id: 'todoListId2', title: 'What to buy', filter: 'all'}\r\n]\r\n\r\nexport const todolistsReducer = (state: Array<TodoListType> = initialState, action: ActionsType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n\r\n        case 'ADD_TODOLIST':\r\n            return [{id: action.todolistId, title: action.title, filter: 'all'}, ...state]\r\n\r\n        case 'CHANGE_TODOLIST_FILTER':\r\n            return state.map(tl => {\r\n                return tl.id === action.id ? {...tl, filter: action.filter} : tl\r\n            })\r\n\r\n        case 'CHANGE_TODOLIST_TITLE':\r\n            let stateCopy = [...state]\r\n            const todoList = stateCopy.find(tl => tl.id === action.id)\r\n            if (todoList) todoList.title = action.title\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {TasksStateType, TaskType} from \"../App\"\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolistsReducer\"\r\nimport {v1} from \"uuid\";\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE_TASK'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\n\r\ntype AddTaskActionType = {\r\n    type: 'ADD_TASK'\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTaskStatusActionType = {\r\n    type: 'CHANGE_TASK_STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE_TASK_TITLE'\r\n    taskId: string\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType |\r\n    ChangeTaskStatusActionType | ChangeTaskTitleActionType |\r\n    AddTodolistActionType | RemoveTodolistActionType\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskActionType => {\r\n    return {\r\n        type: 'REMOVE_TASK',\r\n        taskId: taskId,\r\n        todoListId: todoListId\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (title: string, todoListId: string): AddTaskActionType => {\r\n    return {\r\n        type: 'ADD_TASK',\r\n        title: title,\r\n        todoListId: todoListId\r\n    }\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string): ChangeTaskStatusActionType => {\r\n    return {\r\n        type: 'CHANGE_TASK_STATUS',\r\n        taskId: taskId,\r\n        isDone: isDone,\r\n        todoListId: todoListId\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string): ChangeTaskTitleActionType => {\r\n    return {\r\n        type: 'CHANGE_TASK_TITLE',\r\n        taskId: taskId,\r\n        title: title,\r\n        todoListId: todoListId\r\n    }\r\n}\r\n\r\nconst initialState: TasksStateType = {\r\n    ['todoListId1']: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS', isDone: true},\r\n        {id: v1(), title: 'React', isDone: false},\r\n        {id: v1(), title: 'GraphQL', isDone: false},\r\n        {id: v1(), title: 'Rest API', isDone: true}\r\n    ],\r\n    ['todoListId2']: [\r\n        {id: v1(), title: 'Milk', isDone: true},\r\n        {id: v1(), title: 'Bananas', isDone: true},\r\n        {id: v1(), title: 'Oranges', isDone: false}\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todoListId] = copyState[action.todoListId].filter(task => task.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case 'ADD_TASK': {\r\n            let newTask: TaskType = {id: v1(), title: action.title, isDone: false}\r\n            return {...state, [action.todoListId]: [newTask, ...state[action.todoListId]]}\r\n        }\r\n        case 'CHANGE_TASK_STATUS': {\r\n            let todolistsTasks = state[action.todoListId]\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: todolistsTasks.map(task => {\r\n                    return task.id === action.taskId ? {...task, isDone: action.isDone} : task\r\n                })\r\n            }\r\n        }\r\n        case 'CHANGE_TASK_TITLE': {\r\n            let todolistsTasks = state[action.todoListId]\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: todolistsTasks.map(task => {\r\n                    return task.id === action.taskId ? {...task, title: action.title} : task\r\n                })\r\n            }\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            return {...state, [action.todolistId]: []}\r\n        }\r\n        case 'REMOVE_TODOLIST': {\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import React, {useCallback} from 'react'\r\nimport './App.css'\r\nimport {TodoList} from './TodoList'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {AppBar, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {\r\n    addTodolistAC,\r\n    changeFilterTodolistAC,\r\n    changeTitleTodolistAC,\r\n    removeTodolistAC,\r\n} from './state/todolistsReducer'\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasksReducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStoreType} from './state/store'\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}))\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const classes = useStyles()\r\n\r\n    let todoLists = useSelector<AppRootStoreType, Array<TodoListType>>(state => state.todolists)\r\n    let dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskAC(title, todoListId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\r\n        dispatch(removeTaskAC(taskId, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, isDone: boolean, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((filterValue: FilterValuesType, todoListId: string) => {\r\n        dispatch(changeFilterTodolistAC(filterValue, todoListId))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(removeTodolistAC(todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        let action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTitleTodoList = useCallback((title: string, todoListId: string) => {\r\n        dispatch(changeTitleTodolistAC(title, todoListId))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className='App'>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        To-do List\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <TodoList\r\n                                        todolistId={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTitleTodoList}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux","import {combineReducers, createStore} from \"redux\"\r\nimport {tasksReducer} from \"./tasksReducer\"\r\nimport {todolistsReducer} from \"./todolistsReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStoreType = ReturnType<typeof rootReducer>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\n//import App from './App'\r\n//import AppWithReducers from './AppWithReducers'\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}