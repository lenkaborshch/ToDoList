{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/todolistsReducer.ts","state/tasksReducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","onAddTaskClick","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","deActivatedEditMode","changeValue","onBlur","autoFocus","onDoubleClick","TodoList","tasks","useSelector","state","id","map","task","className","isDone","Checkbox","checked","changeStatus","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","changeFilter","filter","initialState","v1","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","AppWithRedux","classes","todoLists","todolists","dispatch","useDispatch","todoListId","type","addTaskAC","taskId","removeTaskAC","changeTaskStatus","changeTaskStatusAC","changeTaskTitleAC","filterValue","changeFilterTodolistAC","removeTodolistAC","changeTitleTodoList","changeTitleTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","action","todolistId","addTodolistAC","tl","tasksForToDoList","item","Paper","rootReducer","combineReducers","copyState","newTask","stateCopy","find","t","todolistTasks","todoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.622f8219.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets  see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\nimport {Button, IconButton, TextField} from '@material-ui/core'\nimport {AddBox, TextFields} from '@material-ui/icons'\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm(props: AddItemFormPropsType) {\n\n    let [title, setTitle] = useState<string>('')\n    let [error, setError] = useState<string | null>(null)\n\n    const onAddTaskClick = () => {\n        if (title.trim()) {\n            props.addItem(title.trim())\n            setTitle('')\n        } else {\n            setError('Title is required!')\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(null)\n        setTitle(e.currentTarget.value)\n        /*console.log(title) */\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            onAddTaskClick()\n        }\n    }\n\n    return (\n        <div>\n            <TextField variant='standard'\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       error={!!error}\n                       label='Write...'\n                       helperText={error}/>\n            <IconButton color='primary' onClick={onAddTaskClick}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n}","import React, {useState, ChangeEvent} from 'react'\nimport {TextField} from '@material-ui/core'\n\ntype EditableSpanPropsType = {\n    value: string\n    changeValue: (value: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanPropsType) {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.value)\n\n    const activatedEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deActivatedEditMode = () => {\n        setEditMode(false)\n        props.changeValue(title)\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <TextField variant='standard'\n                         value={title}\n                         onBlur={deActivatedEditMode}\n                         onKeyPress={e => e.key === 'Enter' ? deActivatedEditMode() : null}\n                         autoFocus={true}\n                         onChange={onChangeHandler}\n            />\n            : <span onDoubleClick={activatedEditMode}>{props.value}</span>\n    )\n}","import React, {ChangeEvent} from 'react'\nimport {FilterValuesType, TaskType} from './App'\nimport {AddItemForm} from './AddItemForm'\nimport {EditableSpan} from './EditableSpan'\nimport {Button, IconButton, Checkbox} from '@material-ui/core'\nimport {Delete} from '@material-ui/icons'\nimport {AppRootStoreType} from \"./state/store\";\nimport {useSelector} from \"react-redux\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todoListId: string) => void\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\n    addTask: (title: string, todoListId: string) => void\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\n    removeTodoList: (todoListId: string) => void\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\n    changeTodoListTitle: (title: string, todoListId: string) => void\n}\n\nexport function TodoList(props: TodoListPropsType) {\n    let tasksTodoLists = useSelector<AppRootStoreType, Array<TaskType>>(state => state.tasks[props.id])\n\n    const tasks = tasksTodoLists.map(task => {\n        const removeTask = () => props.removeTask(task.id, props.id)\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n            props.changeStatus(task.id, e.currentTarget.checked, props.id)\n        }\n        const changeTaskTitle = (value: string) => {\n            props.changeTaskTitle(task.id, value, props.id)\n        }\n\n        return (\n            <div key={task.id} className={task.isDone ? 'is-done' : ''}>\n                <Checkbox color='primary' checked={task.isDone} onChange={changeTaskStatus}/>\n                <EditableSpan value={task.title} changeValue={changeTaskTitle}/>\n                <IconButton onClick={removeTask}>\n                    <Delete/>\n                </IconButton>\n            </div>)\n    })\n\n    const onAllClickHandler = () => props.changeFilter('all', props.id)\n    const onActiveClickHandler = () => props.changeFilter('active', props.id)\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id)\n\n    const addTask = (title: string) => props.addTask(title, props.id)\n    const removeTodoList = () => props.removeTodoList(props.id)\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan value={props.title} changeValue={changeTodoListTitle}/>\n                <IconButton onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm addItem={addTask}/>\n            <div>\n                {tasks}\n            </div>\n\n            <div>\n                <Button onClick={onAllClickHandler}\n                        variant={props.filter === 'all' ? 'outlined' : 'text'}\n                        color={props.filter === 'all' ? 'secondary' : 'default'}>All</Button>\n                <Button onClick={onActiveClickHandler}\n                        variant={props.filter === 'active' ? 'outlined' : 'text'}\n                        color={props.filter === 'active' ? 'secondary' : 'default'}>Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                        color={props.filter === 'completed' ? 'secondary' : 'default'}>Completed</Button>\n            </div>\n        </div>\n    )\n}","import {FilterValuesType, TodoListType} from \"../App\"\nimport {v1} from \"uuid\"\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE_TODOLIST'\n    id: string\n}\n\nexport type AddTodolistActionType = {\n    type: 'ADD_TODOLIST'\n    title: string\n    todolistId: string\n}\n\ntype ChangeFilterTodolistActionType = {\n    type: 'CHANGE_TODOLIST_FILTER'\n    filter: FilterValuesType\n    id: string\n}\n\ntype ChangeTitleTodolistActionType = {\n    type: 'CHANGE_TODOLIST_TITLE'\n    title: string\n    id: string\n}\n\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType |\n    ChangeFilterTodolistActionType | ChangeTitleTodolistActionType\n\nexport const removeTodolistAC = (todoListId: string): RemoveTodolistActionType => ({\n    type: 'REMOVE_TODOLIST',\n    id: todoListId\n})\nexport const addTodolistAC = (title: string): AddTodolistActionType => ({\n    type: 'ADD_TODOLIST',\n    title: title,\n    todolistId: v1()\n})\nexport const changeFilterTodolistAC = (filter: FilterValuesType, todoListId: string): ChangeFilterTodolistActionType => ({\n    type: 'CHANGE_TODOLIST_FILTER',\n    id: todoListId,\n    filter: filter\n})\n\nexport const changeTitleTodolistAC = (title: string, todoListId: string): ChangeTitleTodolistActionType => ({\n    type: 'CHANGE_TODOLIST_TITLE',\n    id: todoListId,\n    title: title\n})\n\nconst initialState: Array<TodoListType> = [\n    {id: 'todoListId1', title: 'What to learn', filter: 'all'},\n    {id: 'todoListId2', title: 'What to buy', filter: 'all'}\n]\n\nexport const todolistsReducer = (state: Array<TodoListType> = initialState, action: ActionsType): Array<TodoListType> => {\n    switch (action.type) {\n        case 'REMOVE_TODOLIST':\n            return state.filter(tl => tl.id !== action.id)\n\n        case 'ADD_TODOLIST':\n            return [{id: action.todolistId, title: action.title, filter: 'all'}, ...state]\n\n        case 'CHANGE_TODOLIST_FILTER':\n            return state.map(tl => {\n                return tl.id === action.id ? {...tl, filter: action.filter} : tl\n            })\n\n        case 'CHANGE_TODOLIST_TITLE':\n            let stateCopy = [...state]\n            const todoList = stateCopy.find(tl => tl.id === action.id)\n            if (todoList) todoList.title = action.title\n            return stateCopy\n\n        default:\n            return state\n    }\n}","import {TasksStateType, TaskType} from \"../App\"\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolistsReducer\"\nimport {v1} from \"uuid\";\n\ntype RemoveTaskActionType = {\n    type: 'REMOVE_TASK'\n    taskId: string\n    todoListId: string\n}\n\ntype AddTaskActionType = {\n    type: 'ADD_TASK'\n    title: string\n    todoListId: string\n}\n\ntype ChangeTaskStatusActionType = {\n    type: 'CHANGE_TASK_STATUS'\n    taskId: string\n    isDone: boolean\n    todoListId: string\n}\n\ntype ChangeTaskTitleActionType = {\n    type: 'CHANGE_TASK_TITLE'\n    taskId: string\n    title: string\n    todoListId: string\n}\n\ntype ActionsType = RemoveTaskActionType | AddTaskActionType |\n    ChangeTaskStatusActionType | ChangeTaskTitleActionType |\n    AddTodolistActionType | RemoveTodolistActionType\n\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskActionType => {\n    return {\n        type: 'REMOVE_TASK',\n        taskId: taskId,\n        todoListId: todoListId\n    }\n}\n\nexport const addTaskAC = (title: string, todoListId: string): AddTaskActionType => {\n    return {\n        type: 'ADD_TASK',\n        title: title,\n        todoListId: todoListId\n    }\n}\n\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string): ChangeTaskStatusActionType => {\n    return {\n        type: 'CHANGE_TASK_STATUS',\n        taskId: taskId,\n        isDone: isDone,\n        todoListId: todoListId\n    }\n}\n\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string): ChangeTaskTitleActionType => {\n    return {\n        type: 'CHANGE_TASK_TITLE',\n        taskId: taskId,\n        title: title,\n        todoListId: todoListId\n    }\n}\n\nconst initialState: TasksStateType = {\n    ['todoListId1']: [\n        {id: v1(), title: 'HTML&CSS', isDone: true},\n        {id: v1(), title: 'JS', isDone: true},\n        {id: v1(), title: 'React', isDone: false},\n        {id: v1(), title: 'GraphQL', isDone: false},\n        {id: v1(), title: 'Rest API', isDone: true}\n    ],\n    ['todoListId2']: [\n        {id: v1(), title: 'Milk', isDone: true},\n        {id: v1(), title: 'Bananas', isDone: true},\n        {id: v1(), title: 'Oranges', isDone: false}\n    ]\n}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE_TASK': {\n            let copyState = {...state}\n            copyState[action.todoListId] = copyState[action.todoListId].filter(task => task.id !== action.taskId)\n            return copyState\n        }\n        case 'ADD_TASK': {\n            let newTask: TaskType = {id: '0', title: action.title, isDone: false}\n            return {...state, [action.todoListId]: [newTask, ...state[action.todoListId]]}\n        }\n        case 'CHANGE_TASK_STATUS': {\n            let stateCopy = {...state}\n            const task = stateCopy[action.todoListId].find(t => t.id === action.taskId)\n            if (task) {\n                task.isDone = action.isDone\n            }\n            return stateCopy\n        }\n        case 'CHANGE_TASK_TITLE': {\n            let todolistTasks = state[action.todoListId]\n            const task = state[action.todoListId].find(task => task.id === action.taskId)\n            if (task) {\n                task.title = action.title\n            }\n            return {...state, [action.todoListId]: todolistTasks}\n        }\n        case 'ADD_TODOLIST': {\n            return {...state, [action.todolistId]: []}\n        }\n        case 'REMOVE_TODOLIST': {\n            let stateCopy = {...state}\n            delete stateCopy[action.id]\n            return stateCopy\n        }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport './App.css'\nimport {TodoList} from './TodoList'\nimport {AddItemForm} from './AddItemForm'\nimport {AppBar, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core'\nimport {makeStyles} from '@material-ui/core/styles'\nimport {Menu} from '@material-ui/icons'\nimport {\n    addTodolistAC,\n    changeFilterTodolistAC,\n    changeTitleTodolistAC,\n    removeTodolistAC,\n} from \"./state/todolistsReducer\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasksReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStoreType} from \"./state/store\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type FilterValuesType = 'all' | 'active' | 'completed'\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}))\n\nfunction AppWithRedux() {\n    const classes = useStyles()\n\n    let todoLists = useSelector<AppRootStoreType, Array<TodoListType>>(state => state.todolists)\n    let tasks = useSelector<AppRootStoreType, TasksStateType>(state => state.tasks)\n\n    let dispatch = useDispatch()\n\n    const addTask = (title: string, todoListId: string) => {\n        dispatch(addTaskAC(title, todoListId))\n    }\n\n    const removeTask = (taskId: string, todoListId: string) => {\n        dispatch(removeTaskAC(taskId, todoListId))\n    }\n\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoListId: string) => {\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId))\n    }\n\n    const changeTaskTitle = (taskId: string, title: string, todoListId: string) => {\n        dispatch(changeTaskTitleAC(taskId, title, todoListId))\n    }\n\n    const changeFilter = (filterValue: FilterValuesType, todoListId: string) => {\n        dispatch(changeFilterTodolistAC(filterValue, todoListId))\n    }\n\n    const removeTodoList = (todoListId: string) => {\n        dispatch(removeTodolistAC(todoListId))\n    }\n\n    const addTodoList = (title: string) => {\n        let action = addTodolistAC(title)\n        dispatch(action)\n    }\n\n    const changeTitleTodoList = (title: string, todoListId: string) => {\n        dispatch(changeTitleTodolistAC(title, todoListId))\n    }\n\n    return (\n        <div className='App'>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        To-do List\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: '20px'}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {todoLists.map(tl => {\n                        let tasksForToDoList = tasks[tl.id]\n\n                        if (tl.filter === 'active') {\n                            tasksForToDoList = tasks[tl.id].filter(task => !task.isDone)\n                        }\n\n                        if (tl.filter === 'completed') {\n                            tasksForToDoList = tasks[tl.id].filter(task => task.isDone)\n                        }\n\n                        return (\n                            <Grid item key={tl.id}>\n                                <Paper style={{padding: '10px'}}>\n                                    <TodoList\n                                        id={tl.id}\n                                        title={tl.title}\n                                        filter={tl.filter}\n                                        tasks={tasksForToDoList}\n                                        removeTask={removeTask}\n                                        changeFilter={changeFilter}\n                                        addTask={addTask}\n                                        changeStatus={changeTaskStatus}\n                                        removeTodoList={removeTodoList}\n                                        changeTaskTitle={changeTaskTitle}\n                                        changeTodoListTitle={changeTitleTodoList}\n                                    />\n                                </Paper>\n                            </Grid>\n                        )\n                    })}\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n\nexport default AppWithRedux","import {combineReducers, createStore} from \"redux\"\nimport {tasksReducer} from \"./tasksReducer\"\nimport {todolistsReducer} from \"./todolistsReducer\"\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n\nexport const store = createStore(rootReducer)\n\nexport type AppRootStoreType = ReturnType<typeof rootReducer>\n\n//@ts-ignore\nwindow.store = store\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n//import App from './App'\n//import AppWithReducers from './AppWithReducers'\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>,\n    document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}