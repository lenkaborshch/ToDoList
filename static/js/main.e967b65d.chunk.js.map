{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","addTask","trim","id","onClick","removeTodoList","style","backgroundColor","borderRadius","marginRight","value","onChange","e","currentTarget","console","log","onKeyPress","key","className","tasks","map","task","isDone","type","checked","changeStatus","removeTask","changeFilter","filter","App","todoListId1","v1","todoListId2","setTasks","todoLists","setTodoLists","todoListId","todoListTasks","newTask","taskId","find","t","todoList","tl","tasksForToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e967b65d.chunk.js","sourcesContent":["import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\r\nimport {filterValuesType, TaskType} from './App';\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: filterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: filterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    let [title, setTitle] = useState<string>('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addTask = () => {\r\n        if (title.trim()) {\r\n            props.addTask(title.trim(), props.id);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required!');\r\n        }\r\n\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        setTitle(e.currentTarget.value);\r\n        console.log(title);//????????????????\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id)\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id)\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <button onClick={removeTodoList} style={{backgroundColor: 'red', borderRadius: '50%', marginRight: '5px'}}>X</button>\r\n                {props.title}\r\n            </h3>\r\n            <div>\r\n                <input value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? 'error' : ''}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className='error-message'>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {props.tasks.map(task => {\r\n                    const removeTask = () => props.removeTask(task.id, props.id);\r\n                    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeStatus(task.id, e.currentTarget.checked, props.id);\r\n                    }\r\n                    return (\r\n                        <li key={task.id} className={task.isDone ? 'is-done' : ''}>\r\n                            <input type='checkbox' checked={task.isDone} onChange={changeStatus}/>\r\n                            <span>{task.title}</span>\r\n                            <button onClick={removeTask}>X</button>\r\n                        </li>)\r\n                })}\r\n            </ul>\r\n\r\n            <div>\r\n                <button onClick={onAllClickHandler}\r\n                        className={props.filter === 'all' ? 'active-filter' : ''}>All\r\n                </button>\r\n                <button onClick={onActiveClickHandler}\r\n                        className={props.filter === 'active' ? 'active-filter' : ''}>Active\r\n                </button>\r\n                <button onClick={onCompletedClickHandler}\r\n                        className={props.filter === 'completed' ? 'active-filter' : ''}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {setInterval} from 'timers';\r\nimport {v1} from 'uuid';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type filterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: filterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListId1 = v1()\r\n    const todoListId2 = v1()\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: true}\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Bananas', isDone: true},\r\n            {id: v1(), title: 'Oranges', isDone: false}\r\n        ]\r\n    })\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    const addTask = (title: string, todoListId: string) => {\r\n        let todoListTasks = tasks[todoListId]\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        tasks[todoListId] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const removeTask = (taskId: string, todoListId: string) => {\r\n        let todoListTasks = tasks[todoListId]\r\n        tasks[todoListId] = todoListTasks.filter(task => task.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const changeStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        let todoListTasks = tasks[todoListId]\r\n        let task = todoListTasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    const changeFilter = (value: filterValuesType, todoListId: string) => {\r\n        let todoList = todoLists.find(tl => tl.id === todoListId);\r\n        if (todoList) {\r\n            todoList.filter = value;\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists( todoLists.filter(tl => tl.id !== todoListId) )\r\n        delete tasks[todoListId]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    /*let [time, setTime] = useState<string>(new Date().toLocaleTimeString())\r\n\r\n    let stopTime = setInterval(() => {\r\n        setTime(new Date().toLocaleTimeString())\r\n    }, 1000);*/\r\n\r\n    return (\r\n        <div className='App'>\r\n            {todoLists.map(tl => {\r\n                let tasksForToDoList = tasks[tl.id];\r\n\r\n                if (tl.filter === 'active') {\r\n                    tasksForToDoList = tasks[tl.id].filter(task => !task.isDone)\r\n                }\r\n\r\n                if (tl.filter === 'completed') {\r\n                    tasksForToDoList = tasks[tl.id].filter(task => task.isDone)\r\n                }\r\n\r\n                return (\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasksForToDoList}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeStatus={changeStatus}\r\n                        removeTodoList={removeTodoList}\r\n                    />\r\n                )\r\n            })}\r\n\r\n            {/*<div className='time'>\r\n                {time}\r\n                <button onClick={() => clearInterval(stopTime)}>\r\n                    Stop Time\r\n                </button>\r\n            </div>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}