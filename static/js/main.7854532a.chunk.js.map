{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onAddTaskClick","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","deActivatedEditMode","changeValue","onBlur","autoFocus","onDoubleClick","TodoList","tasks","map","task","id","className","isDone","Checkbox","checked","changeStatus","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","changeFilter","filter","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","App","classes","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListId","todoListTasks","newTask","taskId","changeTaskStatus","find","t","todoList","tl","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodoListId","tasksForToDoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7854532a.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {Button, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox, TextFields} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState<string>('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const onAddTaskClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n        /*console.log(title);*/\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onAddTaskClick()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant='standard'\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label='Write...'\r\n                       helperText={error}/>\r\n            <IconButton color='primary' onClick={onAddTaskClick}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {useState, ChangeEvent} from 'react'\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    changeValue: (value: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeValue(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField variant='standard'\r\n                         value={title}\r\n                         onBlur={deActivatedEditMode}\r\n                         onKeyPress={e => e.key === 'Enter' ? deActivatedEditMode() : null}\r\n                         autoFocus={true}\r\n                         onChange={onChangeHandler}\r\n            />\r\n            : <span onDoubleClick={activatedEditMode}>{props.value}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport {filterValuesType, TaskType} from './App'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton, Checkbox} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: filterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: filterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\nexport function TodoList(props: TodoListPropsType) {\r\n//нельзя редактировать уже выполненные\r\n\r\n    const tasks = props.tasks.map(task => {\r\n        const removeTask = () => props.removeTask(task.id, props.id)\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeStatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n        const changeTaskTitle = (value: string) => {\r\n            props.changeTaskTitle(task.id, value, props.id)\r\n        }\r\n        return (\r\n            <div key={task.id} className={task.isDone ? 'is-done' : ''}>\r\n                <Checkbox color='primary' checked={task.isDone} onChange={changeTaskStatus} />\r\n                <EditableSpan value={task.title} changeValue={changeTaskTitle}/>\r\n                <IconButton onClick={removeTask}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>)\r\n    })\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id)\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id)\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={props.title} changeValue={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n\r\n            <div>\r\n                <Button onClick={onAllClickHandler}\r\n                        variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        color={props.filter === 'all' ? 'secondary' : 'default'}>All</Button>\r\n                <Button onClick={onActiveClickHandler}\r\n                        variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        color={props.filter === 'active' ? 'secondary' : 'default'}>Active</Button>\r\n                <Button onClick={onCompletedClickHandler}\r\n                        variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        color={props.filter === 'completed' ? 'secondary' : 'default'}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport './App.css'\r\nimport {TodoList} from './TodoList'\r\nimport {v1} from 'uuid'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type filterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: filterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n\r\n    const todoListId1 = v1()\r\n    const todoListId2 = v1()\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: true}\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Bananas', isDone: true},\r\n            {id: v1(), title: 'Oranges', isDone: false}\r\n        ]\r\n    })\r\n\r\n    const addTask = (title: string, todoListId: string) => {\r\n        let todoListTasks = tasks[todoListId]\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        tasks[todoListId] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const removeTask = (taskId: string, todoListId: string) => {\r\n        let todoListTasks = tasks[todoListId]\r\n        tasks[todoListId] = todoListTasks.filter(task => task.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        let todoListTasks = tasks[todoListId]\r\n        let task = todoListTasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    const changeFilter = (value: filterValuesType, todoListId: string) => {\r\n        let todoList = todoLists.find(tl => tl.id === todoListId);\r\n        if (todoList) {\r\n            todoList.filter = value;\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        const newTodoListId = v1()\r\n        const newTodoList: TodoListType = {id: newTodoListId, title: title, filter: 'all'}\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({[newTodoListId]: [], ...tasks})\r\n    }\r\n\r\n    const changeTaskTitle = (taskId: string, title: string, todoListId: string) => {\r\n        const task = tasks[todoListId].find(task => task.id === taskId)\r\n        if (task) task.title = title\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string, todoListId: string) => {\r\n        const todoList = todoLists.find(tl => tl.id === todoListId)\r\n        if (todoList) todoList.title = title\r\n        setTodoLists([...todoLists])\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        To-do List\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n                        let tasksForToDoList = tasks[tl.id];\r\n\r\n                        if (tl.filter === 'active') {\r\n                            tasksForToDoList = tasks[tl.id].filter(task => !task.isDone)\r\n                        }\r\n\r\n                        if (tl.filter === 'completed') {\r\n                            tasksForToDoList = tasks[tl.id].filter(task => task.isDone)\r\n                        }\r\n\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <TodoList\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        tasks={tasksForToDoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeTaskStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}